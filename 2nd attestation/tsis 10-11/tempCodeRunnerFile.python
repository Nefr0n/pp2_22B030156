import random
import pygame
import psycopg2

pygame.init()
WIDTH, HEIGHT = 800, 800
SCREEN = pygame.display.set_mode((WIDTH, HEIGHT))
RED = (255, 0, 0)
BLACK = (0, 0, 0)
BLUE = (0, 0, 255)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLOCK_SIZE = 40

clock = pygame.time.Clock()

class Button:  
    def __init__(self, x, y):
        super().__init__()
        self.x = x
        self.y = y
        self.rect = pygame.draw.rect(
            SCREEN,
            (0, 0, 0),
            (self.x, self.y, 40, 40))

def draw(self):
        self.rect = pygame.draw.rect(
            SCREEN,
            WHITE,
            (self.x, self.y, 40, 40)
        )

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
class Snake:
    def __init__(self):
        self.body = [
        Point(
            x=WIDTH // BLOCK_SIZE // 2,
            y=HEIGHT // BLOCK_SIZE // 2,
        ),
            Point(
               x=WIDTH // BLOCK_SIZE // 2 + 1,
               y=HEIGHT // BLOCK_SIZE // 2,),
        ]


    def draw(self):
        head = self.body[0]
        pygame.draw.rect(
            SCREEN, RED,
            pygame.Rect(head.x * BLOCK_SIZE,
                        head.y * BLOCK_SIZE,
                        BLOCK_SIZE, BLOCK_SIZE)
        )
        for body in self.body[1:]:
            pygame.draw.rect(
                SCREEN, BLUE,
                pygame.Rect(body.x * BLOCK_SIZE,
                            body.y * BLOCK_SIZE,
                            BLOCK_SIZE, BLOCK_SIZE)
            )


    def move(self, dx, dy):
        for idx in range(len(self.body) - 1, 0, -1):
            self.body[idx].x = self.body[idx - 1].x
            self.body[idx].y = self.body[idx - 1].y
        self.body[0].x += dx
        self.body[0].y += dy

        if self.body[0].x > WIDTH // BLOCK_SIZE:
            self.body[0].x = 0
        elif self.body[0].x < 0:
            self.body[0].x = WIDTH // BLOCK_SIZE
        elif self.body[0].y < 0:
            self.body[0].y = WIDTH // BLOCK_SIZE
        elif self.body[0].y > HEIGHT // BLOCK_SIZE:
            self.body[0].y = 0
        
    def check_collision(self, food):
        if food.location.x != self.body[0].x:
            return False
        if food.location.y != self.body[0].y:
            return False
        return True

    def check_wall(self):
        for i in self.body[1:]:
            if i.x == self.body[0].x and i.y == self.body[0].y:
                return True